#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>
#include <stdbool.h>
#include <pthread.h>
#define NUM_THREADS	8
#define MAX 100
MYSQL *conn;
int contador;

typedef struct{
	char nombre[20];
	int socket;
}Usuario;
typedef struct{
	Usuario usuarios[MAX];
	int num;
}Conectados;
Conectados lista_conec;

int AddUserConect(char usuario[20], int socket, Conectados *l){
	strcpy(l->usuarios[l->num].nombre,usuario);
	l->usuarios[l->num].socket = socket;//Se guarda el socket para luego poder invitar a un usuario a jugar
	l->num++;
}

int QuitUserConect(char usuario[20], int socket, Conectados *l)
{
	//Buscamos usuario al que queremos eliminar en el vector "Conectados"
	int i;
	bool encontrado = false;
	
	
	for (i=0;i<l->num;i++)
	{
		if (strcmp(l->usuarios[i].nombre,usuario) == 0)
		{
			encontrado = true;
			int j = i;
			for (j;j < (l->num-1);j++)
			{
				strcpy(l->usuarios[j].nombre,l->usuarios[j+1].nombre);
				l->usuarios[j].socket=l->usuarios[j+1].socket;
			}
		}
		
		
	}
	if (encontrado){
		printf("QuitUserConect encontrado, user: %s\n", usuario);
		l->num--;
	}else{
		printf("QuitUserConect NO encontrado, user: %s\n", usuario);
	}
	
}

void UpdateConectados(Conectados *l){
	int i = 0;
	char conectados[200];
	strcpy(conectados,"19/");
	for(i = 0; i < l->num; i++){
		strcat(conectados, l->usuarios[i].nombre);
		strcat(conectados,"/");
	}
	printf("Lisata de los usuarios conectados: %s\n",conectados);
	//Para informar a todos los demas usuarios
	for(i = 0; i < l->num; i++){
		write(l->usuarios[i].socket,conectados,strlen(conectados));
	}
}
void *AtenderCliente(void *socket)
{
	int res;
	char usuarios[200];
	char *rows;
	int sock_conn;
	int *s;
	s = (int *) socket;
	sock_conn= *s;
	
	char peticion[512];
	char respuesta[512];
	int ret;
	
	int terminar = 0;
	//El cliente podr￡ hacer muchas peticiones
	//mientras terminar sea igual a 0
	while(terminar ==0){
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibido\n");
		
		// Tenemos que a?adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		peticion[ret]='\0';
		
		//Escribimos el nombre en la consola
		
		printf ("Se ha conectado: %s\n",peticion);
		
		//-----------Crear una funcion para usar theader aqui?
		char *p = strtok( peticion, "/");
		int codigo =  atoi (p);
		printf ("%d\n",codigo);
		
		switch(codigo)
		{
			//REGISTRARSE
		case 11 :
			p = strtok(NULL, "/");
			char Usuario[20];
			strcpy (Usuario, p);
			p = strtok(NULL, "/");
			char Contra [20];
			strcpy (Contra, p);
			printf ("%s %s\n",Usuario,Contra);
			if (Registrarse(Usuario,Contra) == 1)
			{
				printf ("SI\n");
				strcpy (respuesta, "SI,");
			}
			else
			{
				printf("NO\n");
				strcpy (respuesta, "NO,");
			}
			
			printf ("%s\n", respuesta);
			// Y lo enviamos
			write (sock_conn,respuesta, strlen(respuesta));
			//close(sock_conn);
			break;
			
		case 12 :
			//LOGUEARSE
			//case 12 :
			printf("Entra?");
			p = strtok(NULL, "/");
			char Usuario1[20];
			strcpy (Usuario1, p);
			p = strtok(NULL, "/");
			char Contra1 [20];
			strcpy (Contra1, p);
			//printf ("%s %s\n",Usuario1,Contra1);
			//valorLoguearse = Loguearse(Usuario1,Contra1);
			//printf("LA funcion retorna %d\n", valorLoguearse);
			if (Loguearse(Usuario1,Contra1) == 1)
			{
				printf ("SI\n");
				strcpy (respuesta, "SI,");
				AddUserConect(Usuario1,sock_conn,&lista_conec);
				//UpdateConectados(&lista_conec);
			}
			else
			{
				printf("NO\n");
				strcpy (respuesta, "NO,");
			}
			printf ("%s\n", respuesta);
			// Y lo enviamos
			write (sock_conn,respuesta, strlen(respuesta));
			//close(sock_conn);
			break;
			
		case 19:
			UpdateConectados(&lista_conec);
			//res = mostrarlista(usuarios);
			//write(sock_conn,usuarios,strlen(usuarios));
			//mostrarlista(usuarios);
			//write(sock_conn, usuarios,	 strlen(usuarios));
			//write(sock_conn, rows, strlen(rows));
			break;
			
		case 20: //El usuario se desconecta y actualizamos lista Conectados
			QuitUserConect(Usuario1,sock_conn,&lista_conec);
			//UpdateConectados(&lista_conec);
			terminar = -1;
			printf ("Salimos del bucle\n");
			break;
			
			//CONSULTAS
			default :
				printf ("NO existe consulta");
				
		} 
	}
	close(sock_conn); 
	//pthread_exit(0);
}
void InicializarBD()
{
	
	int err;
	// Estructura especial para almacenar resultados de consultas 
	
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexi\ufff3n: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexin
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "Juego",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}

int Registrarse(char Usuario[20], char Contra[20])
{
	//Recibiremos un Usuario y contraseￃﾱa.
	//-Comprobamos que dicho Nombre de Usuario no este en la BD
	//-Asignaremos el Identificador n+1, siendo n el ultimo.
	//-Aￃﾱadimos los 3 componentes a la BD.
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	//MYSQL *conn;
	int err;
	char consulta1[200];
	char insertar[200];
	//Si el Usuario estan en la BD:
	//Nos genera una tabla con el nombre del Usuario
	strcpy (consulta1,"SELECT Jugador.Nombre FROM Jugador WHERE Jugador.Nombre =");
	sprintf (consulta1, "%s'%s';",consulta1,Usuario);
	err=mysql_query (conn, consulta1);
	printf("LA consulta es: %s\n",consulta1);
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	printf("Buscamos al jugador....\n");
	//Si no encuentra el usuario, la tabla es NULL
	//Cumplimos la condicion para registrarnos
	if (row == NULL)
	{
		printf("Jugador no encontrado, lo aￃﾱadimos!\n");
		strcpy (insertar,"INSERT INTO Jugador (Nombre, Password) VALUES (");
		sprintf (insertar,"%s'%s','%s');",insertar,Usuario,Contra);
		
		err=mysql_query (conn, insertar);
		if (err!=0) 
		{
			printf ("Error al consultar datos de la base %u %s\n",
					mysql_errno(conn), mysql_error(conn));
			exit (1);
		}
		printf("Jugador aￃﾱadido con exito!!!!!\n");
		return 1;
	}
	
	//Si tenemos el Uuario a registar en la BD:
	//No podemos registrarnos con ese Nombre
	else
	{
		return 0;
	}
}

int Loguearse(char Usuario1[20], char Contra1[20])
{
	//Tenemos que recibir un Usuario y contraseￃﾱa, buscarlo en la BD
	//Si el usuario esta registrado retornamos un 1 y damos paermiso 
	//para que haga su consulta.
	//char Usuario[20];
	//char Contraseￃﾱa[20];
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	//MYSQL *conn;
	int err;
	int id;
	char consulta[200];
	//Nos genera una tabla con el nombre y la contraseￃﾱa que hemos recibido como parametros
	strcpy (consulta,"SELECT Jugador.Nombre, Jugador.Password, Jugador.Identificador FROM Jugador WHERE Jugador.Nombre =");
	sprintf (consulta, "%s'%s'",consulta,Usuario1);
	strcat (consulta," AND Jugador.Password =");
	sprintf (consulta,"%s'%s'",consulta,Contra1);
	printf("Consulta %s\n", consulta);
	err=mysql_query (conn, consulta);
	printf("He pasado este!\n");
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	printf("Obtengo resultado de la consulta\n");
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	printf("Almaceno resultado consulta en row\n");
	
	//Al meter un usuario correcto pero una contraseￃﾱa erronea
	//La fila es NULL ya que no existira jugador con ese nombre y contraseￃﾱa
	if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		return 0;
	}
	
	//Retornamos un 1, usuario logeado con ￃﾩxito
	//En un futuro podemos hacer que retorne el usuario (mas info)
	else
	{
		printf ("Se han obtenido datos en la consulta\n");
		return 1;
	}
	
	
	//mysql_close (conn);
	//exit(0); //Exit de donde???????
}
/*int mostrarlista(char nombres[200]){
int sock_conn, sock_listen, ret;
MYSQL_RES *resultado;
MYSQL_ROW row;
//MYSQL *conn;
int err;
char consulta[200];
//char nombres[200];
//Nos genera una tabla con el nombre y la contraseￃﾱa que hemos recibido como parametros
strcpy (consulta,"SELECT Jugador.Nombre FROM Jugador WHERE Jugador.Conectado=true;");
printf("Consulta %s\n", consulta);
err=mysql_query (conn, consulta);
printf("He pasado este!\n");
if (err!=0) 
{
printf ("Error al consultar datos de la base %u %s\n",
mysql_errno(conn), mysql_error(conn));
exit (1);
}
printf("Obtengo resultado de la consulta\n");
resultado = mysql_store_result (conn);
row = mysql_fetch_row (resultado);
printf("Almaceno resultado consulta en row\n");
nombres[0]='\0';
//Al meter un usuario correcto pero una contraseￃﾱa erronea
//La fila es NULL ya que no existira jugador con ese nombre y contraseￃﾱa
if(row == NULL)
{
printf ("No se han obtenido datos en la consulta\n");
return -1;
//return 'n';
}

//Retornamos un 1, usuario logeado con ￃﾩxito
//En un futuro podemos hacer que retorne el usuario (mas info)
else
{

printf ("se han obtenido datos en la consulta\n");
//nombres = row[0];
sprintf(nombres,"%s",row[0]);
//string nombres = "";
while(row != NULL){
strcat(nombres,"-");
//la columna 0 contiene el nombre del usuario
strcat(nombres, row[0]);
//nombres = nombres + row[0];
//sprintf(nombres,"%s\n", row[0]);
//obtenemos la siguiente fila
row = mysql_fetch_row(resultado);
}
nombres[strlen(nombres)-1]='\0';
//strcpy(p,nombres);
//return p;
return 0;
}
}
*/

int main(int argc, char *argv[])
{
	
	InicializarBD();
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char buff[512];
	char buff2[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// escucharemos en el port 9050
	serv_adr.sin_port = htons(9051);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	//-------------Poner un bucle para los theader y que se puedan conectar 4 personas------
	//La cola de peticiones pendientes no podr? ser superior a 4
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	contador = 0;
	int i;
	int sockets[100];
	pthread_t thread;
	i = 0;
	// Atenderemos solo 5 peticione
	for(;;){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexi?n\n");
		
		sockets[i] =sock_conn;
		//sock_conn es el socket que usaremos para este cliente
		
		//Crear el thread y decirle lo que tiene que hacer
		pthread_create(&thread, NULL, AtenderCliente,&sockets[i]);
		i=i+1;
		// Ahora recibimos su nombre, que dejamos en buff
		
	}
}
