#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>

void InicializarBD()
{
	MYSQL *conn;
	int err;
	// Estructura especial para almacenar resultados de consultas 
	
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexi\ufff3n: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexin
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "Juego",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}

void Consulta(char *nombres, int *IdPartida)
{
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	//int IdPartida;
	MYSQL *conn;
	int err;
	// Pedimos el identificadora de la partida
	printf ("Dame el Identificador de una partida\n"); 
	scanf ("%d", IdPartida);
	
	char consulta [80];
	
	strcpy (consulta,"SELECT Jugador.Nombre FROM Jugador, Partida, JugadorPartida WHERE Partida.Identificador =");
	sprintf (consulta, "%s%d",consulta,IdPartida);
	strcat (consulta," AND (Partida.Identificador = JugadorPartida.Partida) AND (Jugador.Identificador = JugadorPartida.Jugador)");
	
	err=mysql_query (conn, consulta);
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//recogemos el resultado de la consulta. El resultado de la
	//consulta se devuelve en una variable del tipo puntero a
	//MYSQL_RES tal y como hemos declarado anteriormente.
	//Se trata de una tabla virtual en memoria que es la copia
	//de la tabla real en disco.
	resultado = mysql_store_result (conn);
	// El resultado es una estructura matricial en memoria
	// en la que cada fila contiene los datos de una persona.
	// Ahora obtenemos la primera fila que se almacena en una
	// variable de tipo MYSQL_ROW
	row = mysql_fetch_row (resultado);
	
	if (row == NULL)
		printf ("No se han obtenido datos en la consulta\n");
	else
		while (row !=NULL) 
		{
			// la columna 0 contiene el nombre del jugador
			strcpy (nombres,"/");
			sprintf (nombres, "%s%s",nombres,row[0]);
			
			// obtenemos la siguiente fila
			row = mysql_fetch_row (resultado);
		}
	mysql_close (conn);
	exit(0);
}

void Registrarse(char *Usuario[20], char *Contraseña[20])
{
	//Recibiremos un Usuario y contraseña.
	//-Comprobamos que dicho Nombre de Usuario no este en la BD
	//-Asignaremos el Identificador n+1, siendo n el ultimo.
	//-Añadimos los 3 componentes a la BD.
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	MYSQL *conn;
	int err;
	char consulta1[100];
	char consulta2[100];
	//Si el Usuario estan en la BD:
	//Nos genera una tabla con el nombre del Usuario
	strcpy (consulta1,"SELECT Jugador.Nombre FROM Jugador WHERE Jugador.Nombre ='");
	sprintf (consulta1, "%s%s",consulta1,Usuario);
	
	err=mysql_query (conn, consulta1);
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	
	//Si no encuentra el usuario, la tabla es NULL
	//Cumplimos la condicion para registrarnos
	if (row == NULL)
	{
		//Buscamos cual es el ultimo identificador asignable
		strcpy (consulta2,"SELECT MAX(Jugador.Identificador) FROM Jugador");
	}
		
	
	//Si tenemos el Uuario a registar en la BD:
	//No podemos registrarnos con ese Nombre
	else
	{
		return 0;
	}
}

int Loguearse(char Usuario[20], char Contraseña[20])
{
	//Tenemos que recibir un Usuario y contraseña, buscarlo en la BD
	//Si el usuario esta registrado retornamos un 1 y damos paermiso 
	//para que haga su consulta.
	//char Usuario[20];
	//char Contraseña[20];
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	MYSQL *conn;
	int err;
	char consulta[100];
	//Nos genera una tabla con el nombre y la contraseña que hemos recibido como parametros
	strcpy (consulta,"SELECT Jugador.Nombre, Jugador.Password FROM Jugador WHERE Jugador.Nombre ='");
	sprintf (consulta, "%s%s",consulta,Usuario);
	strcat (consulta,"' AND Jugador.Password ='");
	sprintf (consulta, "%s%s",consulta,Contraseña);
	strcat (consulta,"'");
	
	err=mysql_query (conn, consulta);
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	//Al meter un usuario correcto pero una contraseña erronea
	//La fila es NULL ya que no existira jugador con ese nombre y contraseña
	if (row == NULL)
		printf ("No se han obtenido datos en la consulta\n"); 
	
	//Retornamos un 1, usuario logeado con éxito
	//En un futuro podemos hacer que retorne el usuario (mas info)
	else
	{
		return 1;
	}
		
		
		mysql_close (conn);
		exit(0); //Exit de donde???????
}

int main(int argc, char *argv[])
{
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char buff[512];
	char buff2[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// escucharemos en el port 9050
	serv_adr.sin_port = htons(9050);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	//La cola de peticiones pendientes no podr? ser superior a 4
	if (listen(sock_listen, 2) < 0)
		printf("Error en el Listen");
	
	
	// Atenderemos indefinidamente
	for(;;){
		printf ("Escuchando\n");
		
		//Solo nos modemos conectar si la persona esta en la BD
		//Función loguearse nos lo corrobora
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexi?n\n");
		//sock_conn es el socket que usaremos para este cliente
		
		// Ahora recibimos su nombre, que dejamos en buff
		ret=read(sock_conn,buff, sizeof(buff));
		printf ("Recibido\n");
		
		// Tenemos que a?adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		buff[ret]='\0';
		
		//Escribimos el nombre en la consola
		
		printf ("Se ha conectado: %s\n",buff);
		
		
		char *p = strtok( buff, "/");
		int codigo =  atoi (p);
		//p = strtok( NULL, "/");
		//char nombre[20];
		//strcpy (nombre, p);
		printf ("Codigo: %d", codigo);
		
		switch(codigo)
		{
			case 11 :
				p = strtok(NULL, "/");
				
			
			
		}
		
/*		if (codigo ==1) *///piden la longitd del nombre
/*			sprintf (buff2,"%d,",strlen (nombre));*/
/*		else*/
			// quieren saber si el nombre es bonito
/*			if((nombre[0]=='M') || (nombre[0]=='S'))*/
/*			strcpy (buff2,"SI,");*/
/*			else*/
/*				strcpy (buff2,"NO,");*/
			
			
			printf ("%s\n", buff2);
			// Y lo enviamos
			write (sock_conn,buff2, strlen(buff2));
			
			// Se acabo el servicio para este cliente
			close(sock_conn); 
	}
}