//-std=c99 `mysql_config --cflags --libs`
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>
#include <stdbool.h>
#include <pthread.h>
#define NUM_THREADS	8
#define MAX 100
#define MAX_INVI 5

int partida_activa = 0;
char creador_partida[20];

MYSQL *conn;
int contador;

typedef struct{
	char nombre[20];
	int socket;
}Usuario;
typedef struct{
	char nombre[20];
	int notificacion;
	int socket;
}UsuarioInvi;
typedef struct{
	Usuario usuarios[MAX];
	int num;
}Lista;
typedef struct{
	UsuarioInvi usuarios[MAX];
	int num;
}ListaInvi;

Lista lista_conec;//Se crea la lista de conectados
ListaInvi lista_partida;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; //declarar mutex, se usa cuando todos usan una variable en comun 

int Registrarse(char Usuario[20], char Contra[20])
{
	//Recibiremos un Usuario y contrase￱a BD
	//-Asignaremos el Identificador n+1, siendo n el ultimo.
	//-A￱adimos los 3 componentes a la BD.
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	//MYSQL *conn;
	int err;
	char consulta1[200];
	char insertar[200];
	//Si el Usuario estan en la BD:
	//Nos genera una tabla con el nombre del Usuario
	strcpy (consulta1,"SELECT Jugador.Nombre FROM Jugador WHERE Jugador.Nombre =");
	sprintf (consulta1, "%s'%s';",consulta1,Usuario);
	err=mysql_query (conn, consulta1);
	printf("LA consulta es: %s\n",consulta1);
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	printf("Buscamos al jugador....\n");
	//Si no encuentra el usuario, la tabla es NULL
	//Cumplimos la condicion para registrarnos
	if (row == NULL)
	{
		printf("Jugador no encontrado, lo añadimos!\n");
		strcpy (insertar,"INSERT INTO Jugador (Nombre, Password) VALUES ");
		sprintf (insertar,"%s ('%s','%s');",insertar,Usuario,Contra);
		
		err=mysql_query (conn, insertar);
		if (err!=0) 
		{
			printf ("Error al consultar datos de la base %u %s\n",
					mysql_errno(conn), mysql_error(conn));
			exit (1);
		}
		printf("Jugador añadido con exito!!!!!\n");
		return 1;
	}
	
	//Si tenemos el Usuario a registar en la BD:
	//No podemos registrarnos con ese Nombre
	else
	{
		return 0;
	}
}

int Loguearse(char Usuario1[20], char Contra1[20])
{
	//Tenemos que recibir un Usuario y contraseña, buscarlo en la BD
	//Si el usuario esta registrado retornamos un 1 y damos paermiso 
	//para que haga su consulta.
	int sock_conn, sock_listen, ret;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	int err;
	int id;
	char consulta[200];
	
	//Nos genera una tabla con el nombre y la contraseña que hemos recibido como parametros
	strcpy (consulta,"SELECT Jugador.Nombre, Jugador.Password, Jugador.Identificador FROM Jugador WHERE Jugador.Nombre =");
	sprintf (consulta, "%s'%s'",consulta,Usuario1);
	strcat (consulta," AND Jugador.Password =");
	sprintf (consulta,"%s'%s'",consulta,Contra1);
	printf("Consulta %s\n", consulta);
	err=mysql_query (conn, consulta);
	printf("He pasado este!\n");
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	printf("Obtengo resultado de la consulta\n");
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	printf("Almaceno resultado consulta en row\n");
	
	//Al meter un usuario correcto pero una contraseña erronea
	//La fila es NULL ya que no existira jugador con ese nombre y contraseña
	if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		return 0;
	}
	
	//Retornamos un 1, usuario logeado con exito
	//En un futuro podemos hacer que retorne el usuario (mas info)
	else
	{
		printf ("Se han obtenido datos en la consulta\n");
		return 1;
	}
}
int AddUserConect(char usuario[20], int socket, Lista *l){
	strcpy(l->usuarios[l->num].nombre,usuario);
	l->usuarios[l->num].socket = socket;//Se guarda el socket para luego poder invitar a un usuario a jugar
	l->num++;
}

int QuitUserConect(char usuario[20], int socket, Lista *l)
{
	//Buscamos usuario al que queremos eliminar en el vector "Conectados"
	int i;
	bool encontrado = false;
	
	
	for (i=0;i<l->num;i++)
	{
		if (strcmp(l->usuarios[i].nombre,usuario) == 0)
		{
			encontrado = true;
			int j = i;
			for (j;j < (l->num-1);j++)
			{
				strcpy(l->usuarios[j].nombre,l->usuarios[j+1].nombre);
				l->usuarios[j].socket=l->usuarios[j+1].socket;
			}
		}
		
		
	}
	if (encontrado){
		printf("QuitUserConect encontrado, user: %s\n", usuario);
		l->num--;
	}else{
		printf("QuitUserConect NO encontrado, user: %s\n", usuario);
	}
	
}

void UpdateConectados(Lista *l){
	int i = 0;
	char conectados[200];
	strcpy(conectados,"4/");
	for(i = 0; i < l->num; i++){
		strcat(conectados, l->usuarios[i].nombre);
		strcat(conectados,"/");
	}
	conectados[strlen(conectados) - 1] = '\0';
	printf("Respuesta: %s\n", conectados);
	printf("Lista de los usuarios conectados: %s\n",conectados);
	//Para informar a todos los demas usuarios
	for(i = 0; i < l->num; i++){
		write(l->usuarios[i].socket,conectados,strlen(conectados));
	}
	printf("Informacion enviada a los otros usuarios\n");
}
int BuscarUsuarioConectado(Lista *l,char usuario[],char socket[]){//Puede dar error
	for(int i = 0; i < l->num; i++){
		if(strcmp(l->usuarios[i].nombre, usuario)==0){
			//socket = l->usuarios[i].socket;
			sprintf(socket,"%d",l->usuarios[i].socket);
			return 0;
		}
	}
	return 1;
}
void EnviarInvitacion(int socket,char miNombre[20]){
	char mensaje[200];
	sprintf(mensaje,"6/SI/%s",miNombre);
	printf("mensaje: %s\n",mensaje);
	//strcpy(mensaje,"6/SI");
	write(socket,mensaje,strlen(mensaje));
}
void mostrarListaConectados(Lista *l){
	for(int i = 0; i < l->num; i++){
		printf("%d -> usuario: %s | socket: %d\n",i,l->usuarios[i].nombre,l->usuarios[i].socket);
	}
}
void mostrarListaInvitados(ListaInvi *l){
	for(int i = 0; i < l->num; i++){
		printf("%d -> usuario: %s | socket: %d | respuesta: %d\n",i,l->usuarios[i].nombre,l->usuarios[i].socket, l->usuarios[i].notificacion);
	}
}
int BuscarNombreUsuarioConectado(Lista *l,char usuario_socket[],char nombre[]){
	for(int i = 0; i < l->num; i++){
		if(strcmp(l->usuarios[i].socket, usuario_socket)==0){
			//socket = l->usuarios[i].socket;
			sprintf(nombre,"%s",l->usuarios[i].nombre);
			return 0;
		}
	}
	return 1;
}
void GuardarConfirmacion(ListaInvi *l, char n[20], int confir){
	for(int i = 0; i < l->num; i++){
		if(strcmp(l->usuarios[i].nombre, n)==0){
			//socket = l->usuarios[i].socket;
			//sprintf(nombre,"%s",l->usuarios[i].nombre);
			l->usuarios[i].notificacion = confir;
			break;
		}
	}
}
int comprobarTodosAceptan(ListaInvi *l)
{
	for(int i = 0; i < l->num; i++){
		if(l->usuarios[i].notificacion == 0){
			return 1;
		}else if(l->usuarios[i].notificacion == -1){
			return 2;
		}
	}
	return 0;
}
void enviarMensajeUsuarios(ListaInvi *l,char respuesta[10]){
	char mensaje[80];
	int i ;
	if(strcmp(respuesta,"SI") == 0){
		for(i = 0; i < l->num; i++){
			sprintf(mensaje,"7/SI/%d",i);
			write(l->usuarios[i].socket,mensaje,strlen(mensaje));
		}
	}else if(strcmp(respuesta,"NO") == 0){
		for(i = 0; i < l->num; i++){
			sprintf(mensaje,"7/NO");
			write(l->usuarios[i].socket,mensaje,strlen(mensaje));
		}
	}
}
void enviarPosiciones(ListaInvi *l,char posicion[20], int socket){
	char mensaje[80];
	sprintf(mensaje, "9/%s",posicion);
	for(int i = 0; i < l->num; i++){
		if(socket != l->usuarios[i].socket){
			write(l->usuarios[i].socket,mensaje,strlen(mensaje));
		}
	}	
}
void enviarPosicionesBomba(ListaInvi *l,char posicion[20], int socket){
	char mensaje[80];
	sprintf(mensaje, "10/%s",posicion);
	for(int i = 0; i < l->num; i++){
		if(socket != l->usuarios[i].socket){
			write(l->usuarios[i].socket,mensaje,strlen(mensaje));
		}
	}	
}
void enviarFrase(ListaInvi *l,char frase[20],char nombre[20]){
	char mensaje[80];
	sprintf(mensaje, "11/%s - %s",nombre, frase);
	for(int i = 0; i < l->num; i++){
		write(l->usuarios[i].socket,mensaje,strlen(mensaje));
	}	
}
void *AtenderCliente(void *socket)
{
	int res;
	char usuarios[200];
	char *rows;
	int sock_conn;
	int *s;
	s = (int *) socket;
	sock_conn= *s;
	
	char miNombre[20];
	
	char peticion[512];
	char respuesta[512];
	int ret;
	
	int terminar = 0;
	//El cliente podria hacer muchas peticiones
	//mientras terminar sea igual a 0
	while(terminar ==0){
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibido\n");
		
		// Tenemos que a?adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		peticion[ret]='\0';
		
		//Escribimos el nombre en la consola
		
		printf ("Se ha conectado: %s\n",peticion);
		
		//-----------Crear una funcion para usar theader aqui?
		char *p = strtok( peticion, "/");
		int codigo =  atoi (p);
		printf ("case: %d\n",codigo);
		
		switch(codigo)
		{
		case 8:
			printf("Entra al case 8\n");
			p = strtok(NULL, "/");
			char posicion[20];
			strcpy(posicion, p);
			printf("posicion: %s\n",posicion);
			enviarPosiciones(&lista_partida, posicion,sock_conn);
			printf("Termina el case 8\n");
			break;
			//REGISTRARSE
		case 11 :
			p = strtok(NULL, "/");
			char Usuario[20];
			strcpy (Usuario, p);
			p = strtok(NULL, "/");
			char Contra [20];
			strcpy (Contra, p);
			printf ("%s %s\n",Usuario,Contra);
			if (Registrarse(Usuario,Contra) == 1)
			{
				printf ("SI\n");
				strcpy (respuesta, "2/SI");
			}
			else
			{
				printf("NO\n");
				strcpy (respuesta, "2/NO");
			}
			
			printf ("%s\n", respuesta);
			// Y lo enviamos
			write (sock_conn,respuesta, strlen(respuesta));
			break;
			
		case 12 :
			//LOGUEARSE
			//case 12 :
			printf("Entra?");
			p = strtok(NULL, "/");
			char Usuario1[20];
			strcpy (Usuario1, p);
			p = strtok(NULL, "/");
			char Contra1 [20];
			strcpy (Contra1, p);
			if (Loguearse(Usuario1,Contra1) == 1)
			{
				printf ("SI\n");
				strcpy (respuesta, "3/SI");
				strcpy(miNombre,Usuario1);
				printf("Este es mi nombre: %s\n",miNombre);
				AddUserConect(Usuario1,sock_conn,&lista_conec);
				UpdateConectados(&lista_conec);
			}
			else
			{
				printf("NO\n");
				strcpy (respuesta, "3/NO");
			}
			printf ("%s\n", respuesta);
			/*char sock[20];
			strcpy(sock,sock_conn);
			printf("Mi socket: %s\n",sock);*/
			// Y lo enviamos
			write (sock_conn,respuesta, strlen(respuesta));
			mostrarListaConectados(&lista_conec);
			break;
		case 13 :
			printf("Entra al case 13\n");
			if(partida_activa == 1 && strcmp(creador_partida, miNombre) != 0){
				printf("Existe una partida ya creada");	
			}else{
				partida_activa = 1;
				strcpy(creador_partida, miNombre);
				printf("Yo %s voy a crear una partida\n",creador_partida);
				printf("Comienza el mutex\n");
				//comprobar antes el numero de invitados
				pthread_mutex_lock( &mutex );
				strcpy(lista_partida.usuarios[lista_partida.num].nombre,miNombre);
				lista_partida.usuarios[lista_partida.num].notificacion = 1;
				lista_partida.usuarios[lista_partida.num].socket = sock_conn;
				lista_partida.num++;
				pthread_mutex_unlock( &mutex );
				//Invitar
				printf("partida activa: %d\n",partida_activa);
				mostrarListaConectados(&lista_conec);
				printf("Entra?");
				p = strtok(NULL, "/");
				char UsuarioInv[20];
				strcpy (UsuarioInv, p);
				char sock_inv[10];
				int resp = BuscarUsuarioConectado(&lista_conec,UsuarioInv,sock_inv);
				if (resp == 0)
				{
					printf("Comienza el mutex\n");
					//comprobar antes el numero de invitados
					pthread_mutex_lock( &mutex );
					strcpy(lista_partida.usuarios[lista_partida.num].nombre,UsuarioInv);
					lista_partida.usuarios[lista_partida.num].notificacion = -1;
					lista_partida.usuarios[lista_partida.num].socket = atoi(sock_inv);//Se guarda el socket para luego poder invitar a un usuario a jugar
					lista_partida.num++;
					pthread_mutex_unlock( &mutex );
					printf ("----------Lista de invitados---------\n");
					mostrarListaInvitados(&lista_partida);
					printf ("----------FIN lista de invitados---------\n");
					printf ("SI\n");
					strcpy (respuesta, "5/SI");
					//strcpy(y,sock_conn);
					printf("Socket de la persona a invitar: %s\n",sock_inv);
					EnviarInvitacion(atoi(sock_inv),miNombre);
				}
				else
				{
					printf("NO\n");
					strcpy (respuesta, "5/NO");
				}
				printf ("%s\n", respuesta);
				// Y lo enviamos
				write (sock_conn,respuesta, strlen(respuesta));
				//close(sock_conn);
			}	
			break;
		case 14:
			//Acepta invitación
			printf("Entra?\n");
			p = strtok(NULL, "/");
			char creador_partida[20];
			strcpy (creador_partida, p);
			p = strtok(NULL, "/");
			char jugador[20];
			strcpy (jugador, p);
			p = strtok(NULL, "/");
			char confirmacion[20];
			strcpy (confirmacion, p);
			if(strcmp(confirmacion, "true")==0){
				printf("creador: %s | invitado: %s | respuesta: %s\n", creador_partida, jugador, confirmacion);
				GuardarConfirmacion(&lista_partida, jugador, 1);
				printf("------\n");
				mostrarListaInvitados(&lista_partida);
			}else if(strcmp(confirmacion, "false")==0){
				printf("creador: %s | invitado: %s | respuesta: %s\n", creador_partida, jugador, confirmacion);
				GuardarConfirmacion(&lista_partida, jugador, 0);
				printf("------\n");
				mostrarListaInvitados(&lista_partida);
			}
			printf("Numero de invitados: %d\n",lista_partida.num);
			printf("-----Comienza la comprobacion ----\n");
			if(lista_partida.num > 1){
				printf("Comprobamos\n");
				int compr = comprobarTodosAceptan(&lista_partida);
				if(compr == 0){
					printf("--Se juega la partida\n");
					enviarMensajeUsuarios(&lista_partida,"SI");
				}else if(compr == 2){
					printf("--Esperando respuesta de otros jugadores\n");
				}else if(compr == 1){
					printf("--No se juega la partida\n");
					enviarMensajeUsuarios(&lista_partida, "NO");
				}
			}
			printf("-----Fin de la comprobacion----\n");
			printf("-Faltan por confirmar\n");
			break;
		case 15:
			printf("Entra al case 15\n");
			p = strtok(NULL, "/");
			char posicionbom[20];
			strcpy(posicionbom, p);
			printf("posicion: %s\n",posicionbom);
			enviarPosicionesBomba(&lista_partida, posicionbom, sock_conn);
			printf("Termina el case 15\n");
			break;
		case 16:
			printf("Entra al case 16\n");
			p = strtok(NULL, "/");
			char msj[20];
			strcpy(msj, p);
			printf("Mensaje: %s\n",msj);
			enviarFrase(&lista_partida, msj, miNombre);
			printf("Termina el case 15\n");
			break;
		case 20: //El usuario se desconecta y actualizamos lista Conectados
			QuitUserConect(Usuario1,sock_conn,&lista_conec);
			mostrarListaConectados(&lista_conec);
			UpdateConectados(&lista_conec);
			
			//UpdateConectados(&lista_conec);
			terminar = -1;
			printf ("Salimos del bucle\n");
			break;
			
			//CONSULTAS
			default :
				printf ("NO existe consulta");
				
		} 
	}
	close(sock_conn); 
	//pthread_exit(0);
}
void InicializarBD()
{
	
	int err;
	// Estructura especial para almacenar resultados de consultas 
	
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexi\ufff3n: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexin
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "M3_Juego",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}


int main(int argc, char *argv[])
{
	
	InicializarBD();
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char buff[512];
	char buff2[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// escucharemos en el port 9050
	serv_adr.sin_port = htons(9051);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	//-------------Poner un bucle para los theader y que se puedan conectar 4 personas------
	//La cola de peticiones pendientes no podr? ser superior a 4
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	contador = 0;
	int i;
	int sockets[100];
	pthread_t thread;
	i = 0;
	// Atenderemos solo 5 peticione
	for(;;){
		printf ("Escuchando\n");
		
		sock_conn 
			
			
			
			= accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		
		sockets[i] =sock_conn;
		//sock_conn es el socket que usaremos para este cliente
		
		//Crear el thread y decirle lo que tiene que hacer
		pthread_create(&thread, NULL, AtenderCliente,&sockets[i]);
		i=i+1;
		// Ahora recibimos su nombre, que dejamos en buff
		
	}
}
